#include "robot-config.h"
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VCS VEX V5                   */
/*                                                                           */
/*---------------------------------------------------------------------------*/

//Creates a competition object that allows access to Competition methods.
vex::competition;
bool toggle = true;
void switchdrive(){
    toggle = !toggle;
    if(toggle) {
        Controller1.Screen.print("      TANK    ");
    }
    else {
        Controller1.Screen.print("     ARCADE   ");
    }
}
void stop(){
    Controller1.rumble(".");
    LeftDrive.stop(brakeType::hold);
    RightDrive.stop(brakeType::hold);
    Controller1.Screen.print("       HOLD   ");
}
void release(){
    Controller1.rumble(".");
    LeftDrive.stop(brakeType::coast);
    RightDrive.stop(brakeType::coast);
    Controller1.Screen.print("      RELEASED");
    task::sleep(2000);
    if(toggle) {
        Controller1.Screen.print("      TANK    ");
    }
    else {
        Controller1.Screen.print("      ARCADE  ");
    }
}

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton( void ) {
  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous( void ) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................

}

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*                              User Control Task                             */
/*                                                                            */
/*  This task is used to control your robot during the user control phase of  */
/*  a VEX Competition.                                                        */
/*                                                                            */
/*  You must modify the code to add your own robot specific commands here.    */
/*----------------------------------------------------------------------------*/

void usercontrol( void ) {
Controller1.ButtonL1.pressed(stop);
Controller1.ButtonL1.released(release);
Controller1.ButtonX.pressed(switchdrive);
    
if(toggle) {
    Controller1.Screen.print("      TANK    ");
}
else {
    Controller1.Screen.print("      ARCADE  ");
}
    

    while(true){
        
        if(Controller1.ButtonR1.pressing()) {
            Intake.spin(vex::directionType::fwd, 50, vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonR2.pressing()) {
            Intake.spin(vex::directionType::rev, 50, vex::velocityUnits::pct);
        }
        
        if(toggle) {
            if(Controller1.ButtonL1.pressing()) {}
            else {
                RightDrive.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
                LeftDrive.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
            }
        }
        else {
            if(Controller1.ButtonL1.pressing()) {}
            else {
                LeftDrive.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);

            }
        }
        if(Brain.timer(timeUnits::sec) == 20) {
            Controller1.rumble(".-.-");
        }
        else{}
    }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
