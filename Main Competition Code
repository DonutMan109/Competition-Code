#include "robot-config.h"
vex::competition;
bool toggle = true;
int autoselect;

void shoot(){
    Controller1.rumble(".");
    Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
    task::sleep(400);
    while(Catapot.value(rotationUnits::deg) > 172.3) {
        Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
    }
    Catapult.stop();
}
void stop(){
    Controller1.rumble(".");
    LeftDrive1.stop(brakeType::hold);
    LeftDrive2.stop(brakeType::hold);
    RightDrive1.stop(brakeType::hold);
    RightDrive2.stop(brakeType::hold);
    Controller1.Screen.print("       HOLD   ");
}

void release(){
    Controller1.rumble(".");
    LeftDrive1.stop(brakeType::coast);
    LeftDrive2.stop(brakeType::coast);
    RightDrive1.stop(brakeType::coast);
    RightDrive2.stop(brakeType::coast);
    Controller1.Screen.print("      RELEASED");
    task::sleep(2000);
    
}







void pre_auton( void ) { //Pre auton functions
}

void autonomous( void ) { //Autonomous Functions
    RightDrive1.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    RightDrive2.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    LeftDrive1.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    LeftDrive2.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    task::sleep(600);
    RightDrive1.stop();
    RightDrive2.stop();
    LeftDrive1.stop();
    LeftDrive2.stop(); 
    task::sleep(100);
    Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
    task::sleep(700);
    RightDrive1.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    RightDrive2.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    LeftDrive1.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    LeftDrive2.spin(directionType::fwd, 75, vex::velocityUnits::pct);
    while(Catapot.value(rotationUnits::deg) > 173.3) {
    Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
    }
    RightDrive1.stop();
    RightDrive2.stop();
    LeftDrive1.stop();
    LeftDrive2.stop();    
    Catapult.stop();
    }        

void usercontrol( void ) { //User Control Functions
    
Controller1.ButtonDown.pressed(stop);
Controller1.ButtonDown.released(release);
    
    while(true){
        if(Controller1.ButtonB.pressing()) {
            Controller1.rumble(".");
            Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
            task::sleep(400);
            while(Catapot.value(rotationUnits::deg) > 173.3) {
            if(toggle) {//Tank Controls
            if(Controller1.ButtonDown.pressing()) {}
            else {
                LeftDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
            }
        }
        else {//Arcade Controls
            if(Controller1.ButtonDown.pressing()) {}
            else {
                RightDrive1.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
                LeftDrive1.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
            }//End of Arcade else
        }//End of Driver controls else
            Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
            }
            Catapult.stop();
            Controller1.rumble(".");
            }
            
        if(Controller1.ButtonX.pressing()) {
          Controller1.rumble(".");
          toggle = !toggle;
          if(toggle) {
              Controller1.Screen.print("     ARCADE    ");
          }
          else {
              Controller1.Screen.print("       TANK    ");
          }
          task::sleep(200);
        }
        
        if(Controller1.ButtonL2.pressing()) {
            Catapult.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonL1.pressing()) {
            Catapult.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
        }
        else {
            Catapult.stop();
        }

        if(Controller1.ButtonR1.pressing()) {
            Intake.spin(vex::directionType::fwd, 70, vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonR2.pressing()) {
            Intake.spin(vex::directionType::rev, 70, vex::velocityUnits::pct);
        }
        else {
            Intake.stop(brakeType::coast);
        }
        
        
        if(toggle) {//Tank Controls
            if(Controller1.ButtonDown.pressing()) {}
            else {
                LeftDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
            }
        }
        else {//Arcade Controls
            if(Controller1.ButtonDown.pressing()) {}
            else {
                RightDrive1.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
                LeftDrive1.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
            }//End of Arcade else
        }//End of Driver controls else
        }//End of While(true)
    
   
} //End of Driver Control

int main() {
    if(toggle) {
              Controller1.Screen.print("       TANK    ");
          }
          else {
              Controller1.Screen.print("       REV-TANK");
          }
    while(1) {
        Brain.Screen.clearScreen();
        
        if (Competition.isCompetitionSwitch()) {
        Brain.Screen.printAt(1, 40, "Connected to a competition switch");
    } else if (Competition.isFieldControl()) {
        Brain.Screen.printAt(1, 40, "Connected to a field control system");
    } else {
        Brain.Screen.printAt(1, 40, "Not connected to a control system");
}
        if (Competition.isAutonomous()) {
        Brain.Screen.printAt(1, 80, "Robot is in Autonomous mode");
    } else if (Competition.isDriverControl()) {
        Brain.Screen.printAt(1, 80, "Robot is in Driver Control mode");
    }
     else {
        Brain.Screen.printAt(1, 80, "Robot is disabled");
    }
        task::sleep(500);
}
    pre_auton();
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );                   
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }  
    
}
