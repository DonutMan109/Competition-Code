#include "robot-config.h"

vex::competition;
bool toggledrive = true;
bool pid = false;
void stop(){
    Controller1.rumble(".");
    LeftDrive1.stop(brakeType::hold);
    LeftDrive2.stop(brakeType::hold);
    RightDrive1.stop(brakeType::hold);
    RightDrive2.stop(brakeType::hold);
    Controller1.Screen.print("       HOLD   ");
}
void release(){
    Controller1.rumble(".");
    LeftDrive1.stop(brakeType::coast);
    LeftDrive2.stop(brakeType::coast);
    RightDrive1.stop(brakeType::coast);
    RightDrive2.stop(brakeType::coast);
    Controller1.Screen.print("      RELEASED");
    task::sleep(2000);    
}
void pre_auton( void ) {
}
void autonomous( void ) {
}

void usercontrol( void ) {
  Controller1.ButtonL1.pressed( stop );
  Controller1.ButtonL1.released( release );
  while (1){
    Lift.spin(vex::directionType::fwd, Controller2.Axis2.value(), vex::velocityUnits::pct);
    Flipper.spin(vex::directionType::fwd, Controller2.Axis3.value(), vex::velocityUnits::pct);
    Lift.stop(brakeType::hold);
    Flipper.stop(brakeType::hold);
    if(Controller1.ButtonY.pressing()) {
        Controller1.rumble(".");
        pid = !pid;
    }
    if(pid) {
        LeftDrive1.stop(brakeType::hold);
        LeftDrive2.stop(brakeType::hold);
        RightDrive1.stop(brakeType::hold);
        RightDrive2.stop(brakeType::hold);
    }
    else {
        LeftDrive1.stop(brakeType::coast);
        LeftDrive2.stop(brakeType::coast);
        RightDrive1.stop(brakeType::coast);
        RightDrive2.stop(brakeType::coast);
    }
    if(toggledrive) {
      LeftDrive1.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
      LeftDrive2.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
      RightDrive1.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
      RightDrive2.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
  }
  else {
      LeftDrive1.spin(vex::directionType::rev, Controller1.Axis2.value(), vex::velocityUnits::pct);
      LeftDrive2.spin(vex::directionType::rev, Controller1.Axis2.value(), vex::velocityUnits::pct);
      RightDrive1.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
      RightDrive2.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
  }
     if(Controller1.ButtonR1.pressing()) {
         Intake.spin(directionType::fwd, 45, vex::velocityUnits::pct);
     }
     else if(Controller2.ButtonR1.pressing()) {
         Intake.spin(directionType::fwd, 45, vex::velocityUnits::pct);
     }
     else if(Controller1.ButtonR2.pressing()) {
         Intake.spin(directionType::rev, 45, vex::velocityUnits::pct);
     }
     else if(Controller2.ButtonR2.pressing()) {
         Intake.spin(directionType::rev, 45, vex::velocityUnits::pct);
     }
     else {
         Intake.stop();
     }
     if(Controller1.ButtonB.pressing()) {
         Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
        //Controller1.rumble(".");
        //Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
        //task::sleep(400);
        //while(Catapot.value(rotationUnits::deg) < 173.3 ) {
        //Catapult.spin(directionType::rev, 100, vex::velocityUnits::pct);
        //}
        //Catapult.stop(brakeType::hold);
        //Controller1.rumble(".");
        }
      else {
          Catapult.stop(brakeType::hold);
      }
  vex::task::sleep(20);
}
  }
int main() {
    pre_auton();

    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );                     
    while(1) {
      if(Controller1.ButtonX.pressing()) {
          Controller1.rumble(".");
          toggledrive = !toggledrive;
          if(toggledrive) {
          Controller1.Screen.print("       Tank   ");
          Controller2.Screen.print("       Tank   ");
          }
           else{
          Controller1.Screen.print("   Rev-Tank   ");
          Controller2.Screen.print("   Rev-Tank   ");
           }  
      }
      vex::task::sleep(100);
    }    
       
}
