#include "robot-config.h"
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VCS VEX V5                   */
/*                                                                           */
/*---------------------------------------------------------------------------*/

//Creates a competition object that allows access to Competition methods.
vex::competition;
bool toggle = true;
int catapot = Potentiometer1.value(analogUnits::range12bit);
void switchdrive(){
    Controller1.rumble(".");
    toggle = !toggle;
    if(toggle) {
        Controller1.Screen.print("DC -  TANK    ");
    }
    else {
        Controller1.Screen.print("DC - ARCADE   ");
    }
}
//void stop(){
//    Controller1.rumble(".");
//    LeftDrive1.stop(brakeType::hold);
//    LeftDrive2.stop(brakeType::hold);
//    RightDrive1.stop(brakeType::hold);
//    RightDrive2.stop(brakeType::hold);
//    Controller1.Screen.print("       HOLD   ");
//}
//void release(){
//    Controller1.rumble(".");
//    LeftDrive1.stop(brakeType::coast);
//    LeftDrive2.stop(brakeType::coast);
//    RightDrive1.stop(brakeType::coast);
//    RightDrive2.stop(brakeType::coast);
//    Controller1.Screen.print("      RELEASED");
//    task::sleep(2000);
//    if(toggle) {
//        Controller1.Screen.print("DC  - TANK    ");
//    }
//    else {
//        Controller1.Screen.print("DC  - ARCADE  ");
//    }
//}

void pre_auton( void ) {
    Controller1.Screen.print("   Pre Auton  ");
}

void autonomous( void ) {
    Controller1.Screen.print("     Auton    ");
}

void usercontrol( void ) {
Brain.Screen.print("Driver Control");
Controller1.ButtonL1.pressed(stop);
Controller1.ButtonL1.released(release);
Controller1.ButtonX.pressed(switchdrive);
    
if(toggle) {
    Controller1.Screen.print("DC -  TANK    ");
}
else {
    Controller1.Screen.print("DC -  ARCADE  ");
}
    

    while(true){

        if(Controller1.ButtonR1.pressing()) {
            Intake.spin(vex::directionType::fwd, 100, vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonR2.pressing()) {
            Intake.spin(vex::directionType::rev, 100, vex::velocityUnits::pct);
        }
        else {
            Intake.stop(brakeType::coast);
        }
        
        if(Controller1.ButtonB.pressing()) {
            Catapult.spin(directionType::fwd, 40, vex::velocityUnits::pct);
        }
        else {
            Catapult.stop(brakeType::hold);
        }
        
        if(Controller1.Axis2.value()+Controller1.Axis3.value()==0){
            RightDrive1.stop(brakeType::hold);
            RightDrive2.stop(brakeType::hold);
            LeftDrive1.stop(brakeType::hold);
            LeftDrive2.stop(brakeType::hold);
        }
        else {}
        
        if(toggle) {//Tank Controls
            if(Controller1.ButtonL1.pressing()) {}
            else {
                RightDrive1.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
                LeftDrive1.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, Controller1.Axis3.value(), vex::velocityUnits::pct);
            }
        }
        else {//Arcade Controls
            if(Controller1.ButtonL1.pressing()) {}
            else {
                RightDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                RightDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() - Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                LeftDrive1.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
                LeftDrive2.spin(vex::directionType::fwd, (Controller1.Axis3.value() + Controller1.Axis1.value()*2), vex::velocityUnits::pct);
            }//End of Arcade else
        }//End of Driver controls else
        }//End of While(true)
   
} //End of Driver Control

//
// Main will set up the competition functions and callbacks.
//
int main() {
    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
       
}
